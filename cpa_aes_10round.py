# -*- coding: utf-8 -*-
"""kadai2-1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/15__AEc-9JgG3DKsNqHYFUJEJcKYuWV8O
"""
import numpy as np
import math
from matplotlib import pyplot as plt
from mpl_toolkits.mplot3d import Axes3D
# kadai 2-1
vec_file = open('hw/tv_000_cipher.vec')
vec = vec_file.read()

round_keys = []

# create round keys
round_keys = []

# def functions (1)


def ShiftRows(x):
    x[13], x[10], x[7], x[1], x[14], x[11], x[5], x[2], x[15], x[9], x[6], x[3] =\
        x[1], x[2], x[3], x[5], x[6], x[7], x[9], x[10], x[11], x[13], x[14], x[15]
    return x


def InvShiftRows(x):
    x[1], x[2], x[3], x[5], x[6], x[7], x[9], x[10], x[11], x[13], x[14], x[15] =\
        x[13], x[10], x[7], x[1], x[14], x[11], x[5], x[2], x[15], x[9], x[6], x[3]
    return x


def SubBytes(x):
    sbox = [
        0x63, 0x7c, 0x77, 0x7b, 0xf2, 0x6b, 0x6f, 0xc5, 0x30, 0x01, 0x67, 0x2b, 0xfe, 0xd7, 0xab, 0x76,
        0xca, 0x82, 0xc9, 0x7d, 0xfa, 0x59, 0x47, 0xf0, 0xad, 0xd4, 0xa2, 0xaf, 0x9c, 0xa4, 0x72, 0xc0,
        0xb7, 0xfd, 0x93, 0x26, 0x36, 0x3f, 0xf7, 0xcc, 0x34, 0xa5, 0xe5, 0xf1, 0x71, 0xd8, 0x31, 0x15,
        0x04, 0xc7, 0x23, 0xc3, 0x18, 0x96, 0x05, 0x9a, 0x07, 0x12, 0x80, 0xe2, 0xeb, 0x27, 0xb2, 0x75,
        0x09, 0x83, 0x2c, 0x1a, 0x1b, 0x6e, 0x5a, 0xa0, 0x52, 0x3b, 0xd6, 0xb3, 0x29, 0xe3, 0x2f, 0x84,
        0x53, 0xd1, 0x00, 0xed, 0x20, 0xfc, 0xb1, 0x5b, 0x6a, 0xcb, 0xbe, 0x39, 0x4a, 0x4c, 0x58, 0xcf,
        0xd0, 0xef, 0xaa, 0xfb, 0x43, 0x4d, 0x33, 0x85, 0x45, 0xf9, 0x02, 0x7f, 0x50, 0x3c, 0x9f, 0xa8,
        0x51, 0xa3, 0x40, 0x8f, 0x92, 0x9d, 0x38, 0xf5, 0xbc, 0xb6, 0xda, 0x21, 0x10, 0xff, 0xf3, 0xd2,
        0xcd, 0x0c, 0x13, 0xec, 0x5f, 0x97, 0x44, 0x17, 0xc4, 0xa7, 0x7e, 0x3d, 0x64, 0x5d, 0x19, 0x73,
        0x60, 0x81, 0x4f, 0xdc, 0x22, 0x2a, 0x90, 0x88, 0x46, 0xee, 0xb8, 0x14, 0xde, 0x5e, 0x0b, 0xdb,
        0xe0, 0x32, 0x3a, 0x0a, 0x49, 0x06, 0x24, 0x5c, 0xc2, 0xd3, 0xac, 0x62, 0x91, 0x95, 0xe4, 0x79,
        0xe7, 0xc8, 0x37, 0x6d, 0x8d, 0xd5, 0x4e, 0xa9, 0x6c, 0x56, 0xf4, 0xea, 0x65, 0x7a, 0xae, 0x08,
        0xba, 0x78, 0x25, 0x2e, 0x1c, 0xa6, 0xb4, 0xc6, 0xe8, 0xdd, 0x74, 0x1f, 0x4b, 0xbd, 0x8b, 0x8a,
        0x70, 0x3e, 0xb5, 0x66, 0x48, 0x03, 0xf6, 0x0e, 0x61, 0x35, 0x57, 0xb9, 0x86, 0xc1, 0x1d, 0x9e,
        0xe1, 0xf8, 0x98, 0x11, 0x69, 0xd9, 0x8e, 0x94, 0x9b, 0x1e, 0x87, 0xe9, 0xce, 0x55, 0x28, 0xdf,
        0x8c, 0xa1, 0x89, 0x0d, 0xbf, 0xe6, 0x42, 0x68, 0x41, 0x99, 0x2d, 0x0f, 0xb0, 0x54, 0xbb, 0x16,
    ]
    for i in range(len(x)):
        x[i] = sbox[x[i]]
    return x


def InvSubBytes(x):
    sboxInv = [
        0x52, 0x09, 0x6a, 0xd5, 0x30, 0x36, 0xa5, 0x38, 0xbf, 0x40, 0xa3, 0x9e, 0x81, 0xf3, 0xd7, 0xfb,
        0x7c, 0xe3, 0x39, 0x82, 0x9b, 0x2f, 0xff, 0x87, 0x34, 0x8e, 0x43, 0x44, 0xc4, 0xde, 0xe9, 0xcb,
        0x54, 0x7b, 0x94, 0x32, 0xa6, 0xc2, 0x23, 0x3d, 0xee, 0x4c, 0x95, 0x0b, 0x42, 0xfa, 0xc3, 0x4e,
        0x08, 0x2e, 0xa1, 0x66, 0x28, 0xd9, 0x24, 0xb2, 0x76, 0x5b, 0xa2, 0x49, 0x6d, 0x8b, 0xd1, 0x25,
        0x72, 0xf8, 0xf6, 0x64, 0x86, 0x68, 0x98, 0x16, 0xd4, 0xa4, 0x5c, 0xcc, 0x5d, 0x65, 0xb6, 0x92,
        0x6c, 0x70, 0x48, 0x50, 0xfd, 0xed, 0xb9, 0xda, 0x5e, 0x15, 0x46, 0x57, 0xa7, 0x8d, 0x9d, 0x84,
        0x90, 0xd8, 0xab, 0x00, 0x8c, 0xbc, 0xd3, 0x0a, 0xf7, 0xe4, 0x58, 0x05, 0xb8, 0xb3, 0x45, 0x06,
        0xd0, 0x2c, 0x1e, 0x8f, 0xca, 0x3f, 0x0f, 0x02, 0xc1, 0xaf, 0xbd, 0x03, 0x01, 0x13, 0x8a, 0x6b,
        0x3a, 0x91, 0x11, 0x41, 0x4f, 0x67, 0xdc, 0xea, 0x97, 0xf2, 0xcf, 0xce, 0xf0, 0xb4, 0xe6, 0x73,
        0x96, 0xac, 0x74, 0x22, 0xe7, 0xad, 0x35, 0x85, 0xe2, 0xf9, 0x37, 0xe8, 0x1c, 0x75, 0xdf, 0x6e,
        0x47, 0xf1, 0x1a, 0x71, 0x1d, 0x29, 0xc5, 0x89, 0x6f, 0xb7, 0x62, 0x0e, 0xaa, 0x18, 0xbe, 0x1b,
        0xfc, 0x56, 0x3e, 0x4b, 0xc6, 0xd2, 0x79, 0x20, 0x9a, 0xdb, 0xc0, 0xfe, 0x78, 0xcd, 0x5a, 0xf4,
        0x1f, 0xdd, 0xa8, 0x33, 0x88, 0x07, 0xc7, 0x31, 0xb1, 0x12, 0x10, 0x59, 0x27, 0x80, 0xec, 0x5f,
        0x60, 0x51, 0x7f, 0xa9, 0x19, 0xb5, 0x4a, 0x0d, 0x2d, 0xe5, 0x7a, 0x9f, 0x93, 0xc9, 0x9c, 0xef,
        0xa0, 0xe0, 0x3b, 0x4d, 0xae, 0x2a, 0xf5, 0xb0, 0xc8, 0xeb, 0xbb, 0x3c, 0x83, 0x53, 0x99, 0x61,
        0x17, 0x2b, 0x04, 0x7e, 0xba, 0x77, 0xd6, 0x26, 0xe1, 0x69, 0x14, 0x63, 0x55, 0x21, 0x0c, 0x7d
    ]
    for i in range(len(x)):
        x[i] = sboxInv[x[i]]
    return x

# def functions (2)


def text2matrix(text):
    matrix = []
    for elm in text.split(' '):
        matrix.append(int(elm, 16))
    return matrix


def add_round_key(s, k):
    for i in range(16):
        s[i] ^= k[i]
    return s


round_keys_candidates = []
for key_id in range(256):
    key_str = format(key_id, '032x')
    key_matrix = [key_id]*16
    # for i in range(16):
    #    byte = int(key_str[2*i:2*(i+1)], 16)
    #    key_matrix.append(byte)
    round_keys_candidates.append(key_matrix)

# print(round_keys_candidates)
vec_split = vec.splitlines()
res_add_round_key = []

# print(len(vec_split))
for row_id in range(5000):
    # print(row_id)
    cipher_state = text2matrix(vec_split[row_id][:])
    res_row = []
    for key_id in range(256):
        round_keys = round_keys_candidates[key_id]
        res_cipher_state = cipher_state[:]
        add_round_key(res_cipher_state, round_keys[:])
        # print(key_id)
        res_row.append(res_cipher_state)
    res_add_round_key.append(res_row)

# print(res_add_round_key)
# Inv shift rows

res_inv_shift_rows = []

for i in range(5000):
    res_inv_shift_rows.append([])
    # print(i)
    for j in range(256):
        res_inv_shift_rows[i].append(InvShiftRows(res_add_round_key[i][j][:]))

        # print(res_inv_sub_bytes[i][j])

# print(res_inv_sub_bytes)
# Inv sub bytes
# kadai2-1 ok
res_inv_sub_bytes = []

for i in range(5000):
    res_inv_sub_bytes.append([])
    # print(i)
    for j in range(256):
        res_inv_sub_bytes[i].append(InvSubBytes(res_inv_shift_rows[i][j][:]))
        # print(res_inv_sub_bytes[i][j])
# print(np.transpose(res_inv_sub_bytes[0]))
# Inv sub bytes

# kadai2-2
res_hd = [[0] * 256 for _ in range(5000)]

for row_id in range(5000):  # 5000
    # print(row_id)
    cipher_state = text2matrix(vec_split[row_id][:])
    # print(cipher_state)
    # res_hd.append([])
    for j in range(256):
        hd_row = []
        for b in range(16):

            # b=15
            hd = format(cipher_state[b] ^
                        res_inv_sub_bytes[row_id][j][b], 'b').count('1')
            # print(str(cipher_state[b]) + ', ' + str(res_inv_sub_bytes[i][j][b]) + ' --> ' + str(hd))
            hd_row.append(hd)
        res_hd[row_id][j] = hd_row


# print(res_hd[0])
# exit()

# print(res_hd)
# exit()
traces = np.loadtxt('hw/tv_000_power.csv', delimiter=',')
# print(len(traces))
# print(res_hd)
cip_num = 5000
h = [[0] * 256 for _ in range(cip_num)]  # 5000

best_key = [0]*16
num_byte = 0
for num_byte in range(16):
    h = [[0] * 256 for _ in range(cip_num)]
    for d in range(cip_num):  # 5000
        for k in range(256):
            h[d][k] = res_hd[d][k][num_byte]
            # print(h[d][k])
# print(h)

    T = 1000
    t = [[0]*T for _ in range(cip_num)]

    traces_pt = 2700
    for d in range(cip_num):
        for time in range(T):
            t[d][time] = traces[d][traces_pt+time]

    # print(t)
    r = [[0]*T for _ in range(256)]

    def mean(h, i):
        sum = 0
        for n in range(cip_num):
            sum += h[n][i]
        return sum/cip_num

    max_r = [0]*256

    h_t = np.transpose(h)
    t_t = np.transpose(t)
    for i in range(256):
        print(i)
        for j in range(T):

            cov = np.corrcoef(h_t[i], t_t[j])
            r[i][j] = cov[0][1]
            # print(r[i][j])

    for i in range(256):
        max_r[i] = max(r[i])
    # print(max_r[i])
    best_key[num_byte] = max_r.index(max(max_r))
    plt.plot(max_r)
    plt.savefig("index" + str(num_byte)+".png")
print(best_key)
bestkey = [hex(i)[2:] for i in best_key]
print(''.join(ShiftRows(bestkey)))
